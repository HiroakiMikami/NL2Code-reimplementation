imports:
    - "pbe_with_repl_base.yaml"

output_dir: "output/output"

optimizer:
    type: torch.optim.Optimizer
    optimizer_cls:
      type: torch.optim.Adam
    model: "@/model"

collate_fn:
    type: mlprogram.functools.Sequence
    funcs:
        type: collections.OrderedDict
        items:
            - - "to_episode"
              - type: mlprogram.functools.Map
                func: "@/to_episode"
            - - "flatten"
              - type: Flatten
            - - "transform"
              - type: mlprogram.functools.Map
                func: "@/transform"
            - - "collate"
              - "@/collate.collate"

batch_size: 32

loss_fn:
  type: torch.nn.Sequential
  modules:
    type: collections.OrderedDict
    items:
      - - "loss"
        - type: mlprogram.nn.action_sequence.Loss
          reduction: "sum"
      - - "normalize"
        - type: mlprogram.nn.Apply
          in_keys:
            - - "output@action_sequence_loss"
              - "lhs"
          out_key: output@action_sequence_loss
          module:
            type: mlprogram.nn.Function
            f:
              type: Div
          constants:
            rhs: "@/batch_size"
      - - "pick"
        - type: mlprogram.nn.Function
          f:
            type: Pick
            key: output@action_sequence_loss
main:
  type: mlprogram.entrypoint.train_supervised
  workspace_dir: "output/workspace_pretraining"
  output_dir: "@/output_dir"
  dataset: "@/train_dataset"
  model: "@/model"
  optimizer: "@/optimizer"
  loss: "@/loss_fn"
  evaluate: null
  metric: "none"
  collate: "@/collate_fn"
  batch_size: "@/batch_size"
  length:
    type: mlprogram.entrypoint.train.Iteration
    n: "@/option.n_pretrain_iteration"
  evaluation_interval:
    type: mlprogram.entrypoint.train.Iteration
    n: 1000
  snapshot_interval:
    type: mlprogram.entrypoint.train.Iteration
    n: 1000
  device: "@/device"
