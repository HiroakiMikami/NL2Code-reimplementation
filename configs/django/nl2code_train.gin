# device
torch.device.type_str = "cuda"
torch.device.index    = 0

# Dataset
dataset/mlprogram.gin.workspace.put.value = @mlprogram.dataset.django.download()
dataset/mlprogram.gin.workspace.get.key   = "dataset"

# ActionOptions
mlprogram.action.action.ActionOptions.retain_variadic_fields = True
mlprogram.action.action.ActionOptions.split_non_terminal     = True

# to_action_sequence
to_action_sequence/Compose.f = @mlprogram.dataset.django.parse
to_action_sequence/Compose.g = @mlprogram.utils.transform.AstToSingleActionSequence()
mlprogram.utils.transform.AstToSingleActionSequence.tokenize = @mlprogram.utils.python.tokenize_token
mlprogram.utils.transform.AstToSingleActionSequence.options  = @mlprogram.action.action.ActionOptions()

# Encoder
train_dataset/mlprogram.gin.get_key.key                  = "train"
train_dataset/mlprogram.gin.get_key.target               = @dataset/mlprogram.gin.workspace.get()
mlprogram.gin.nl2code.prepare_encoder.dataset            = @train_dataset/mlprogram.gin.get_key()
mlprogram.gin.nl2code.prepare_encoder.word_threshold     = 5
mlprogram.gin.nl2code.prepare_encoder.token_threshold    = 5
mlprogram.gin.nl2code.prepare_encoder.parse              = @mlprogram.dataset.django.parse
mlprogram.gin.nl2code.prepare_encoder.to_action_sequence = @to_action_sequence/Compose()
mlprogram.gin.nl2code.prepare_encoder.extract_query      = @mlprogram.dataset.django.tokenize_query
mlprogram.gin.nl2code.prepare_encoder.tokenize_token     = @mlprogram.utils.python.tokenize_token
word_encoder/mlprogram.gin.workspace.get.key             = "query_encoder"
action_sequence_encoder/mlprogram.gin.workspace.get.key  = "action_sequence_encoder"

# Transform
mlprogram.utils.transform.TransformDataset.transform_input                   = @mlprogram.utils.transform.nl2code.TransformQuery()
mlprogram.utils.transform.nl2code.TransformQuery.extract_query               = @mlprogram.dataset.django.tokenize_query
mlprogram.utils.transform.nl2code.TransformQuery.word_encoder                = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.TransformDataset.transform_code                    = @mlprogram.utils.transform.TransformCode()
mlprogram.utils.transform.TransformCode.to_action_sequence                   = @to_action_sequence/Compose()
mlprogram.utils.transform.TransformDataset.transform_evaluator               = @mlprogram.utils.transform.nl2code.TransformEvaluator()
mlprogram.utils.transform.nl2code.TransformEvaluator.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.nl2code.TransformEvaluator.train                   = True
mlprogram.utils.transform.TransformDataset.transform_ground_truth            = @mlprogram.utils.transform.TransformGroundTruth()
mlprogram.utils.transform.TransformGroundTruth.action_sequence_encoder       = @action_sequence_encoder/mlprogram.gin.workspace.get()

# Model
mlprogram.nn.nl2code.TrainModel.query_encoder           = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.nl2code.TrainModel.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.nl2code.TrainModel.embedding_dim           = 128
mlprogram.nn.nl2code.TrainModel.node_type_embedding_dim = 64
mlprogram.nn.nl2code.TrainModel.lstm_state_size         = 256
mlprogram.nn.nl2code.TrainModel.hidden_state_size       = 50
mlprogram.nn.nl2code.TrainModel.dropout                 = 0.2
model/mlprogram.gin.workspace.put.value                 = @mlprogram.nn.nl2code.TrainModel()
model/mlprogram.gin.workspace.get.key                   = "model"

# Collate
mlprogram.utils.data.CollateAll.collate_input             = @mlprogram.utils.data.nl2code.CollateInput()
mlprogram.utils.data.CollateAll.collate_action_sequence   = @mlprogram.utils.data.nl2code.CollateActionSequence()
mlprogram.utils.data.CollateAll.collate_query             = @mlprogram.utils.data.collate_none
mlprogram.utils.data.CollateAll.collate_ground_truth      = @mlprogram.utils.data.CollateGroundTruth()
mlprogram.utils.data.nl2code.CollateInput.device          = @torch.device()
mlprogram.utils.data.nl2code.CollateActionSequence.device = @torch.device()
mlprogram.utils.data.CollateGroundTruth.device            = @torch.device()

# Optimizer
mlprogram.gin.optimizer.create_optimizer.optimizer_cls = @torch.optim.Adam
mlprogram.gin.optimizer.create_optimizer.model         = @model/mlprogram.gin.workspace.get()
optimizer/mlprogram.gin.workspace.put.value            = @mlprogram.gin.optimizer.create_optimizer()

# Task
entrypoint.task                              = @mlprogram.gin.nl2prog.train
mlprogram.gin.nl2prog.train.dataset_key        = "dataset"
mlprogram.gin.nl2prog.train.model_key          = "model"
mlprogram.gin.nl2prog.train.optimizer_key      = "optimizer"
mlprogram.gin.nl2prog.train.encoder_keys       = ["query_encoder", "action_sequence_encoder"]
mlprogram.gin.nl2prog.train.workspace_dir      = "output/workspace"
mlprogram.gin.nl2prog.train.output_dir         = "output/output"
mlprogram.gin.nl2prog.train.prepare_dataset    = @dataset/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.train.prepare_encoder    = @mlprogram.gin.nl2code.prepare_encoder
mlprogram.gin.nl2prog.train.prepare_model      = @model/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.train.prepare_optimizer  = @optimizer/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.train.transform_cls      = @mlprogram.utils.transform.TransformDataset
mlprogram.gin.nl2prog.train.loss_fn            = @mlprogram.nn.Loss()
mlprogram.gin.nl2prog.train.score_fn           = @mlprogram.nn.Accuracy()
mlprogram.gin.nl2prog.train.collate_fn         = @mlprogram.utils.data.CollateAll()
mlprogram.gin.nl2prog.train.batch_size         = 10
mlprogram.gin.nl2prog.train.num_epochs         = 50
mlprogram.gin.nl2prog.train.device             = @torch.device()
