# device
torch.device.type_str = "cuda"
torch.device.index    = 0

# Dataset
dataset/mlprogram.gin.workspace.put.value = @mlprogram.datasets.nl2bash.download()
dataset/mlprogram.gin.workspace.get.key   = "dataset"

# ActionOptions
mlprogram.actions.ActionOptions.retain_variadic_fields = True
mlprogram.actions.ActionOptions.split_non_terminal     = True

# Encoder
word_encoder/mlprogram.gin.workspace.get.key             = "query_encoder"
action_sequence_encoder/mlprogram.gin.workspace.get.key  = "action_sequence_encoder"

# Transform
mlprogram.utils.transform.nl2code.TransformQuery.extract_query               = @mlprogram.datasets.nl2bash.tokenize_query
mlprogram.utils.transform.nl2code.TransformQuery.word_encoder                = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.nl2code.TransformActionSequence.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.nl2code.TransformActionSequence.train                   = False

# Model
mlprogram.nn.nl2code.TrainModel.query_encoder           = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.nl2code.TrainModel.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.nl2code.TrainModel.embedding_dim           = 128
mlprogram.nn.nl2code.TrainModel.node_type_embedding_dim = 64
mlprogram.nn.nl2code.TrainModel.lstm_state_size         = 256
mlprogram.nn.nl2code.TrainModel.hidden_state_size       = 50
mlprogram.nn.nl2code.TrainModel.dropout                 = 0.2

# Collate
sequence_option/mlprogram.utils.data.CollateOptions.use_pad_sequence = True
sequence_option/mlprogram.utils.data.CollateOptions.dim              = 0
sequence_option/mlprogram.utils.data.CollateOptions.padding_value    = -1
history_option/mlprogram.utils.data.CollateOptions.use_pad_sequence = False
history_option/mlprogram.utils.data.CollateOptions.dim              = 1
history_option/mlprogram.utils.data.CollateOptions.padding_value    = 0
state_option/mlprogram.utils.data.CollateOptions.use_pad_sequence = False
state_option/mlprogram.utils.data.CollateOptions.dim              = 0
state_option/mlprogram.utils.data.CollateOptions.padding_value    = 0
mlprogram.utils.data.Collate.device                = @torch.device()
mlprogram.utils.data.Collate.word_nl_query         = @sequence_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.nl_query_features     = @sequence_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.actions               = @sequence_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.previous_actions      = @sequence_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.previous_action_rules = @sequence_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.history               = @history_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.hidden_state          = @state_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.state                 = @state_option/mlprogram.utils.data.CollateOptions()
mlprogram.utils.data.Collate.ground_truth_actions  = @sequence_option/mlprogram.utils.data.CollateOptions()

# Synthesizer
mlprogram.decoders.BeamSearch.beam_size                            = 15
mlprogram.decoders.BeamSearch.max_step_size                        = 350
mlprogram.decoders.BeamSearch.sampler                              = @mlprogram.samplers.ActionSequenceSampler()
mlprogram.samplers.ActionSequenceSampler.encoder                   = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.samplers.ActionSequenceSampler.get_token_type            = None
mlprogram.samplers.ActionSequenceSampler.is_subtype                = @mlprogram.languages.python.is_subtype
mlprogram.samplers.ActionSequenceSampler.transform_input           = @mlprogram.utils.transform.nl2code.TransformQuery()
mlprogram.samplers.ActionSequenceSampler.transform_action_sequence = @mlprogram.utils.transform.nl2code.TransformActionSequence()
mlprogram.samplers.ActionSequenceSampler.collate                   = @mlprogram.utils.data.Collate()
mlprogram.samplers.ActionSequenceSampler.module                    = @mlprogram.nn.nl2code.TrainModel()
mlprogram.samplers.ActionSequenceSampler.options                   = @mlprogram.actions.ActionOptions()
synthesizer/mlprogram.gin.workspace.put.value                      = @mlprogram.decoders.BeamSearch()

# Metrics
mlprogram.metrics.Accuracy.parse   = @mlprogram.languages.bash.parse
mlprogram.metrics.Accuracy.unparse = @mlprogram.languages.bash.unparse
mlprogram.metrics.Bleu.parse       = @mlprogram.languages.bash.parse
mlprogram.metrics.Bleu.unparse     = @mlprogram.languages.bash.unparse

# Task
entrypoint.task                                  = @mlprogram.gin.nl2prog.evaluate
mlprogram.gin.nl2prog.evaluate.dataset_key         = "dataset"
mlprogram.gin.nl2prog.evaluate.synthesizer_key     = "synthesizer"
mlprogram.gin.nl2prog.evaluate.encoder_keys        = ["query_encoder", "action_sequence_encoder"]
mlprogram.gin.nl2prog.evaluate.input_dir           = "output/output"
mlprogram.gin.nl2prog.evaluate.workspace_dir       = "output/workspace"
mlprogram.gin.nl2prog.evaluate.output_dir          = "output/output"
mlprogram.gin.nl2prog.evaluate.prepare_dataset     = @dataset/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.evaluate.prepare_synthesizer = @synthesizer/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.evaluate.metrics             = {"accuracy": @mlprogram.metrics.Accuracy(), "bleu": @mlprogram.metrics.Bleu()}
mlprogram.gin.nl2prog.evaluate.main_metric         = (1, "bleu")
mlprogram.gin.nl2prog.evaluate.top_n               = [1]
mlprogram.gin.nl2prog.evaluate.device              = @torch.device()
