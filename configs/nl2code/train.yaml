imports:
  - "base.yaml"

transform:
  type: mlprogram.functools.Sequence
  funcs:
    type: collections.OrderedDict
    items:
      - - "transform_input"
        - type: mlprogram.utils.transform.nl2code.TransformQuery
          extract_reference:
            type: mlprogram.datasets.nl2bash.TokenizeQuery
          word_encoder: "@/encoder.word_encoder"
      - - "transform_code"
        - type: mlprogram.utils.transform.action_sequence.TransformCode
          parser: "@/parser"
      - - "transform_action_sequence"
        - type: mlprogram.utils.transform.nl2code.TransformActionSequence
          action_sequence_encoder: "@/encoder.action_sequence_encoder"
          train: true
      - - "transform_ground_truth"
        - type: mlprogram.utils.transform.action_sequence.TransformGroundTruth
          action_sequence_encoder: "@/encoder.action_sequence_encoder"

optimizer:
  type: torch.optim.Optimizer
  optimizer_cls:
    type: torch.optim.Adam
  model: "@/model"

main:
  type: mlprogram.entrypoint.train_supervised
  workspace_dir: "output/workspace"
  output_dir: "@/output_dir"
  dataset: "@/train_dataset"
  model: "@/model"
  optimizer: "@/optimizer"
  loss:
    type: torch.nn.Sequential
    modules:
      type: collections.OrderedDict
      items:
        - - "loss"
          - type: mlprogram.nn.action_sequence.Loss
        - - "pick"
          - type: mlprogram.nn.Function
            f:
              type: Pick
              key: "output@action_sequence_loss"
  evaluate:
    type: mlprogram.entrypoint.EvaluateSynthesizer
    dataset: "@/test_dataset"
    synthesizer: "@/synthesizer"
    metrics: "@/metrics"
    top_n: "@/top_n"
    n_process: "@/n_process"
  metric: "@/metric"
  threshold: 1.0
  collate:
    type: mlprogram.functools.Compose
    funcs:
      type: collections.OrderedDict
      items:
        - - "transform"
          - type: mlprogram.functools.Map
            func: "@/transform"
        - - "collate"
          - "@/collate.collate"
  batch_size: "@/batch_size"
  length:
    type: mlprogram.entrypoint.train.Epoch
    n: "@/n_epoch"
  evaluation_interval:
    type: mlprogram.entrypoint.train.Epoch
    n: "@/eval_interval"
  snapshot_interval:
    type: mlprogram.entrypoint.train.Epoch
    n: "@/snapshot_interval"
  device: "@/device"
