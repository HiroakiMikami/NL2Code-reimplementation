# device
torch.device.type_str = "cuda"
torch.device.index    = 0

# Dataset
dataset/mlprogram.gin.workspace.put.value = @mlprogram.dataset.hearthstone.download()
dataset/mlprogram.gin.workspace.get.key   = "dataset"

# ActionOptions
mlprogram.ast.action.ActionOptions.retain_variadic_fields = False
mlprogram.ast.action.ActionOptions.split_non_terminal     = False

# to_action_sequence
mlprogram.ast.action.code_to_action_sequence.parse    = @mlprogram.language.python.parse
mlprogram.ast.action.code_to_action_sequence.tokenize = @mlprogram.utils.python.tokenize_token
mlprogram.ast.action.code_to_action_sequence.options  = @mlprogram.ast.action.ActionOptions()

# Encoder
word_encoder/mlprogram.gin.workspace.get.key             = "query_encoder"
char_encoder/mlprogram.gin.workspace.get.key             = "char_encoder"
action_sequence_encoder/mlprogram.gin.workspace.get.key  = "action_sequence_encoder"

# Transform
mlprogram.utils.transform.treegen.TransformQuery.extract_query               = @mlprogram.utils.python.tokenize_query
mlprogram.utils.transform.treegen.TransformQuery.word_encoder                = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.treegen.TransformQuery.char_encoder                = @char_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.treegen.TransformQuery.max_word_length             = 128
mlprogram.utils.transform.treegen.TransformEvaluator.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.treegen.TransformEvaluator.max_arity               = 128
mlprogram.utils.transform.treegen.TransformEvaluator.max_depth               = 128
mlprogram.utils.transform.treegen.TransformEvaluator.train                   = False

# Model
mlprogram.nn.treegen.TrainModel.query_encoder                        = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.treegen.TrainModel.char_encoder                         = @char_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.treegen.TrainModel.action_sequence_encoder              = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.treegen.TrainModel.max_token_len                        = 128
mlprogram.nn.treegen.TrainModel.max_arity                            = 128
mlprogram.nn.treegen.TrainModel.max_depth                            = 128
mlprogram.nn.treegen.TrainModel.num_heads                            = 8
mlprogram.nn.treegen.TrainModel.num_nl_reader_blocks                 = 6
mlprogram.nn.treegen.TrainModel.num_action_sequence_reader_blocks    = 6
mlprogram.nn.treegen.TrainModel.num_decoder_blocks                   = 6
mlprogram.nn.treegen.TrainModel.hidden_size                          = 256
mlprogram.nn.treegen.TrainModel.feature_size                         = 1024
mlprogram.nn.treegen.TrainModel.dropout                              = 0.15

# Collate
mlprogram.utils.data.treegen.CollateInput.device          = @torch.device()
mlprogram.utils.data.treegen.CollateActionSequence.device = @torch.device()
mlprogram.utils.data.treegen.CollateQuery.device          = @torch.device()
mlprogram.utils.data.CollateNlFeature.device              = @torch.device()

# Synthesizer
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.beam_size               = 15
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.transform_input         = @mlprogram.utils.transform.treegen.TransformQuery()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.transform_evaluator     = @mlprogram.utils.transform.treegen.TransformEvaluator()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.collate_input           = @mlprogram.utils.data.treegen.CollateInput()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.collate_action_sequence = @mlprogram.utils.data.treegen.CollateActionSequence()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.collate_query           = @mlprogram.utils.data.treegen.CollateQuery()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.collate_state           = @mlprogram.utils.data.collate_none
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.collate_nl_feature      = @mlprogram.utils.data.CollateNlFeature()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.collate_other_feature   = @mlprogram.utils.data.collate_none
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.split_states            = @mlprogram.utils.data.split_none
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.model                   = @mlprogram.nn.treegen.TrainModel()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.is_subtype              = @mlprogram.language.python.is_subtype
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.options                 = @mlprogram.ast.action.ActionOptions()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.device                  = @torch.device()
mlprogram.synthesizer.CommonBeamSearchSynthesizer.create.max_steps               = 350
synthesizer/mlprogram.gin.workspace.put.value                              = @mlprogram.synthesizer.CommonBeamSearchSynthesizer.create()

# Metrics
mlprogram.metrics.Accuracy.parse          = @mlprogram.language.python.parse
mlprogram.metrics.Accuracy.unparse        = @mlprogram.language.python.unparse
mlprogram.metrics.python.Bleu.parse       = @mlprogram.language.python.parse
mlprogram.metrics.python.Bleu.unparse     = @mlprogram.language.python.unparse

# Task
entrypoint.task                                  = @mlprogram.gin.nl2prog.evaluate
mlprogram.gin.nl2prog.evaluate.dataset_key         = "dataset"
mlprogram.gin.nl2prog.evaluate.synthesizer_key     = "synthesizer"
mlprogram.gin.nl2prog.evaluate.encoder_keys        = ["query_encoder", "char_encoder", "action_sequence_encoder"]
mlprogram.gin.nl2prog.evaluate.input_dir           = "output/output"
mlprogram.gin.nl2prog.evaluate.workspace_dir       = "output/workspace"
mlprogram.gin.nl2prog.evaluate.output_dir          = "output/output"
mlprogram.gin.nl2prog.evaluate.prepare_dataset     = @dataset/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.evaluate.prepare_synthesizer = @synthesizer/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.evaluate.metrics             = {"accuracy": @mlprogram.metrics.Accuracy(), "bleu": @mlprogram.metrics.python.Bleu()}
mlprogram.gin.nl2prog.evaluate.main_metric         = (1, "bleu")
mlprogram.gin.nl2prog.evaluate.top_n               = [1]
mlprogram.gin.nl2prog.evaluate.device              = @torch.device()
