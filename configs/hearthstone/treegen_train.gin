# device
torch.device.type_str = "cuda"
torch.device.index    = 0

# Dataset
dataset/mlprogram.gin.workspace.put.value = @mlprogram.dataset.hearthstone.download()
dataset/mlprogram.gin.workspace.get.key   = "dataset"

# ActionOptions
mlprogram.action.action.ActionOptions.retain_variadic_fields = False
mlprogram.action.action.ActionOptions.split_non_terminal     = False

# to_action_sequence
to_action_sequence/Compose.f = @mlprogram.language.python.parse
to_action_sequence/Compose.g = @mlprogram.utils.transform.AstToSingleActionSequence()
mlprogram.utils.transform.AstToSingleActionSequence.tokenize = @mlprogram.utils.python.tokenize_token
mlprogram.utils.transform.AstToSingleActionSequence.options  = @mlprogram.action.action.ActionOptions()

# Encoder
train_dataset/mlprogram.gin.get_key.key                  = "train"
train_dataset/mlprogram.gin.get_key.target               = @dataset/mlprogram.gin.workspace.get()
mlprogram.gin.treegen.prepare_encoder.dataset            = @train_dataset/mlprogram.gin.get_key()
mlprogram.gin.treegen.prepare_encoder.word_threshold     = 3
mlprogram.gin.treegen.prepare_encoder.char_threshold     = 0
mlprogram.gin.treegen.prepare_encoder.token_threshold    = 0
mlprogram.gin.treegen.prepare_encoder.parse              = @mlprogram.language.python.parse
mlprogram.gin.treegen.prepare_encoder.to_action_sequence = @to_action_sequence/Compose()
mlprogram.gin.treegen.prepare_encoder.extract_query      = @mlprogram.utils.python.tokenize_query
mlprogram.gin.treegen.prepare_encoder.tokenize_token     = @mlprogram.utils.python.tokenize_token
word_encoder/mlprogram.gin.workspace.get.key             = "query_encoder"
char_encoder/mlprogram.gin.workspace.get.key             = "char_encoder"
action_sequence_encoder/mlprogram.gin.workspace.get.key  = "action_sequence_encoder"

# Transform
mlprogram.utils.transform.TransformDataset.transform_input                   = @mlprogram.utils.transform.treegen.TransformQuery()
mlprogram.utils.transform.treegen.TransformQuery.extract_query               = @mlprogram.utils.python.tokenize_query
mlprogram.utils.transform.treegen.TransformQuery.word_encoder                = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.treegen.TransformQuery.char_encoder                = @char_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.treegen.TransformQuery.max_word_length             = 128
mlprogram.utils.transform.TransformDataset.transform_code                    = @mlprogram.utils.transform.TransformCode()
mlprogram.utils.transform.TransformCode.to_action_sequence                   = @to_action_sequence/Compose()
mlprogram.utils.transform.TransformDataset.transform_evaluator               = @mlprogram.utils.transform.treegen.TransformEvaluator()
mlprogram.utils.transform.treegen.TransformEvaluator.action_sequence_encoder = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.utils.transform.treegen.TransformEvaluator.max_arity               = 128
mlprogram.utils.transform.treegen.TransformEvaluator.max_depth               = 128
mlprogram.utils.transform.treegen.TransformEvaluator.train                   = True
mlprogram.utils.transform.TransformDataset.transform_ground_truth            = @mlprogram.utils.transform.TransformGroundTruth()
mlprogram.utils.transform.TransformGroundTruth.action_sequence_encoder       = @action_sequence_encoder/mlprogram.gin.workspace.get()

# Model
mlprogram.nn.treegen.TrainModel.query_encoder                        = @word_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.treegen.TrainModel.char_encoder                         = @char_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.treegen.TrainModel.action_sequence_encoder              = @action_sequence_encoder/mlprogram.gin.workspace.get()
mlprogram.nn.treegen.TrainModel.max_token_len                        = 128
mlprogram.nn.treegen.TrainModel.max_arity                            = 128
mlprogram.nn.treegen.TrainModel.max_depth                            = 128
mlprogram.nn.treegen.TrainModel.num_heads                            = 8
mlprogram.nn.treegen.TrainModel.num_nl_reader_blocks                 = 6
mlprogram.nn.treegen.TrainModel.num_action_sequence_reader_blocks    = 6
mlprogram.nn.treegen.TrainModel.num_decoder_blocks                   = 6
mlprogram.nn.treegen.TrainModel.hidden_size                          = 256
mlprogram.nn.treegen.TrainModel.feature_size                         = 1024
mlprogram.nn.treegen.TrainModel.dropout                              = 0.15
model/mlprogram.gin.workspace.put.value                              = @mlprogram.nn.treegen.TrainModel()
model/mlprogram.gin.workspace.get.key                                = "model"

# Collate
mlprogram.utils.data.CollateAll.collate_input             = @mlprogram.utils.data.treegen.CollateInput()
mlprogram.utils.data.CollateAll.collate_action_sequence   = @mlprogram.utils.data.treegen.CollateActionSequence()
mlprogram.utils.data.CollateAll.collate_query             = @mlprogram.utils.data.treegen.CollateQuery()
mlprogram.utils.data.CollateAll.collate_ground_truth      = @mlprogram.utils.data.CollateGroundTruth()
mlprogram.utils.data.treegen.CollateInput.device          = @torch.device()
mlprogram.utils.data.treegen.CollateActionSequence.device = @torch.device()
mlprogram.utils.data.treegen.CollateQuery.device          = @torch.device()
mlprogram.utils.data.CollateGroundTruth.device            = @torch.device()

# Optimizer
mlprogram.gin.optimizer.create_optimizer.optimizer_cls = @fairseq.optim.Adafactor
mlprogram.gin.optimizer.create_optimizer.model         = @model/mlprogram.gin.workspace.get()
optimizer/mlprogram.gin.workspace.put.value            = @mlprogram.gin.optimizer.create_optimizer()

# Task
entrypoint.task                              = @mlprogram.gin.nl2prog.train
mlprogram.gin.nl2prog.train.dataset_key        = "dataset"
mlprogram.gin.nl2prog.train.model_key          = "model"
mlprogram.gin.nl2prog.train.optimizer_key      = "optimizer"
mlprogram.gin.nl2prog.train.encoder_keys       = ["query_encoder", "char_encoder", "action_sequence_encoder"]
mlprogram.gin.nl2prog.train.workspace_dir      = "output/workspace"
mlprogram.gin.nl2prog.train.output_dir         = "output/output"
mlprogram.gin.nl2prog.train.prepare_dataset    = @dataset/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.train.prepare_encoder    = @mlprogram.gin.treegen.prepare_encoder
mlprogram.gin.nl2prog.train.prepare_model      = @model/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.train.prepare_optimizer  = @optimizer/mlprogram.gin.workspace.put
mlprogram.gin.nl2prog.train.transform_cls      = @mlprogram.utils.transform.TransformDataset
mlprogram.gin.nl2prog.train.loss_fn            = @mlprogram.nn.Loss()
mlprogram.gin.nl2prog.train.score_fn           = @mlprogram.nn.Accuracy()
mlprogram.gin.nl2prog.train.collate_fn         = @mlprogram.utils.data.CollateAll()
mlprogram.gin.nl2prog.train.batch_size         = 1
mlprogram.gin.nl2prog.train.num_epochs         = 50
mlprogram.gin.nl2prog.train.device             = @torch.device()
