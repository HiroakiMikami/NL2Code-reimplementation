imports:
  - "nl2code_base.yaml"

output_dir: "output/output"

normalize_dataset:
  type: mlprogram.utils.transform.NormalizeGroundTruth
  normalize:
    type: mlprogram.utils.Sequence
    funcs:
      type: collections.OrderedDict
      items:
        - - parse
          - "@/parse"
        - - unparse
          - type: mlprogram.languages.python.Unparse
dataset:
  type: mlprogram.datasets.hearthstone.download
test_dataset:
  type: mlprogram.utils.data.transform
  dataset: "@/dataset.test"
  transform: "@/normalize_dataset"
valid_dataset:
  type: mlprogram.utils.data.transform
  dataset: "@/dataset.valid"
  transform: "@/normalize_dataset"

encoder:
  word_encoder:
    type: mlprogram.utils.load
    file:
      type: os.path.join
      args:
        - "@/output_dir"
        - "word_encoder.pt"
  action_sequence_encoder:
    type: mlprogram.utils.load
    file:
      type: os.path.join
      args:
        - "@/output_dir"
        - "action_sequence_encoder.pt"

transform:
  transform_input:
    type: mlprogram.utils.transform.nl2code.TransformQuery
    extract_query:
      type: mlprogram.datasets.hearthstone.TokenizeQuery
    word_encoder: "@/encoder.word_encoder"
  transform_action_sequence:
    type: mlprogram.utils.transform.nl2code.TransformActionSequence
    action_sequence_encoder: "@/encoder.action_sequence_encoder"
    train: false

synthesizer:
  type: mlprogram.synthesizers.BeamSearch
  beam_size: 15
  max_step_size: 350
  sampler:
    type: mlprogram.samplers.transform
    sampler:
      type: mlprogram.samplers.ActionSequenceSampler
      encoder: "@/encoder.action_sequence_encoder"
      get_token_type: null
      is_subtype:
        type: mlprogram.languages.python.IsSubtype
      transform_input: "@/transform.transform_input"
      transform_action_sequence: "@/transform.transform_action_sequence"
      collate: "@/collate"
      module: "@/model"
    transform:
      type: mlprogram.languages.python.Unparse

# Metrics
metrics:
  accuracy:
    type: mlprogram.metrics.Accuracy
  bleu:
    type: mlprogram.metrics.python.Bleu

main:
  type: mlprogram.entrypoint.evaluate
  workspace_dir: "output/workspace"
  input_dir: "@/output_dir"
  output_dir: "@/output_dir"
  test_dataset: "@/test_dataset"
  valid_dataset: "@/valid_dataset"
  model: "@/model"
  synthesizer: "@/synthesizer"
  metrics: "@/metrics"
  main_metric:
    - 1
    - "bleu"
  top_n:
    - 1
  device: "@/device"
