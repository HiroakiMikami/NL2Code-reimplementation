from torch.utils.data import Dataset
from typing import Callable, Any, List, Optional
from torchnlp.encoders import LabelEncoder
from mlprogram.encoders import ActionSequenceEncoder
from mlprogram.gin import workspace
from mlprogram.utils import Query
from mlprogram.utils.data import get_samples, get_words, get_characters
from mlprogram.ast.ast import AST
from mlprogram.ast.action import ActionSequence, ActionOptions


def prepare_encoder(dataset: Dataset, word_threshold: int, char_threshold: int,
                    token_threshold: int, parse: Callable[[Any], AST],
                    to_action_sequence: Callable[[Any],
                                                 Optional[ActionSequence]],
                    extract_query: Callable[[Any], Query],
                    tokenize_token: Callable[[Any], List[str]],
                    encoder_path_prefix: str = ""):
    words = get_words(dataset, extract_query)
    chars = get_characters(dataset, extract_query)
    samples = get_samples(dataset, tokenize_token,
                          to_action_sequence)
    # TODO: ActionOptions generated by gin-config cannot be pickled
    samples.options = ActionOptions(samples.options.retain_variadic_fields,
                                    samples.options.split_non_terminal)

    qencoder = LabelEncoder(words, word_threshold)
    cencoder = LabelEncoder(chars, char_threshold)
    aencoder = ActionSequenceEncoder(samples, token_threshold)
    workspace.put(f"{encoder_path_prefix}query_encoder", qencoder)
    workspace.put(f"{encoder_path_prefix}char_encoder", cencoder)
    workspace.put(f"{encoder_path_prefix}action_sequence_encoder", aencoder)
